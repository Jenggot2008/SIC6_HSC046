import time
import network
import urequests as requests
from machine import Pin, time_pulse_us
import dht

# === KONFIGURASI WiFi ===
SSID = ""  # Ganti dengan SSID WiFi
PASSWORD = ""  # Ganti dengan password WiFi

# === KONFIGURASI UBIDOTS ===
DEVICE_ID = "rgf_bakso"
TOKEN = "BBUS-AdNAy2qyEUmUZCcIkJf5IMKrb5irSS"
DISTANCE_LABEL = "distance"
TEMP_LABEL = "temperature"
HUMIDITY_LABEL = "humidity"
MOTION_LABEL = "motion"

# === KONFIGURASI FLASK API ===
FLASK_URL = "http://192.168.223.5:5000/sensor/data"

# === KONFIGURASI SENSOR ULTRASONIK ===
TRIG_PIN = 22
ECHO_PIN = 23
trig = Pin(TRIG_PIN, Pin.OUT)
echo = Pin(ECHO_PIN, Pin.IN)

# === KONFIGURASI SENSOR DHT ===
DHT_PIN = 15  # Pin sensor DHT22
sensor_dht = dht.DHT11(Pin(DHT_PIN))

# === KONFIGURASI SENSOR PIR ===
PIR_PIN = 18  # Pin sensor PIR
pir_sensor = Pin(PIR_PIN, Pin.IN)

# === LED Indikator ===
led = Pin(5, Pin.OUT)

# === FUNGSI KONEKSI KE WiFi ===
def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(SSID, PASSWORD)

    print("\U0001F504 Connecting to WiFi...")
    timeout = 10
    while not wlan.isconnected() and timeout > 0:
        time.sleep(1)
        timeout -= 1

    if wlan.isconnected():
        print("‚úÖ Connected to WiFi!")
        print("üì° IP Address:", wlan.ifconfig()[0])
    else:
        print("‚ùå Failed to connect to WiFi! Check your credentials.")

# === FUNGSI MEMBACA JARAK DENGAN FILTER MEDIAN ===
def get_distance(samples=5):
    readings = []
    
    for _ in range(samples):
        trig.off()
        time.sleep_us(2)
        trig.on()
        time.sleep_us(10)
        trig.off()

        duration = time_pulse_us(echo, 1, 30000)
        if duration > 0:
            distance = (duration * 0.0343) / 2
            readings.append(distance)
        time.sleep(0.02)

    if readings:
        readings.sort()
        return readings[len(readings) // 2]  # Ambil nilai median
    else:
        return None

# === FUNGSI MEMBACA SENSOR DHT11 ===
def get_dht_data():
    try:
        sensor_dht.measure()
        temp = sensor_dht.temperature()
        humidity = sensor_dht.humidity()
        return temp, humidity
    except Exception as e:
        print(f"‚ö†Ô∏è Error reading DHT sensor: {e}")
        return None, None

# === FUNGSI MEMBACA SENSOR PIR ===
def get_motion():
    return pir_sensor.value()

# === FUNGSI KIRIM DATA KE UBIDOTS ===
def send_data_to_ubidots(distance, temp, humidity, motion):
    url = f"http://industrial.api.ubidots.com/api/v1.6/devices/{DEVICE_ID}"
    headers = {
        "Content-Type": "application/json",
        "X-Auth-Token": TOKEN
    }
    
    data = {
        DISTANCE_LABEL: distance,
        TEMP_LABEL: temp,
        HUMIDITY_LABEL: humidity,
        MOTION_LABEL: motion
    }

    try:
        response = requests.post(url, json=data, headers=headers)
        if response.status_code in [200, 201]:
            print(f"‚úÖ Data sent to Ubidots! Distance: {distance:.2f} cm, Temp: {temp:.2f}¬∞C, Humidity: {humidity:.2f}%, Motion: {motion}")
            led.value(1)  # LED menyala saat data berhasil dikirim
        else:
            print(f"‚ö†Ô∏è Failed to send data to Ubidots! Response: {response.text}")
            led.value(0)  # LED mati jika gagal
        response.close()
    except Exception as e:
        print(f"‚ùå Error sending data to Ubidots: {e}")
        led.value(0)

# === FUNGSI KIRIM DATA KE FLASK ===
def send_data_to_flask(distance, temp, humidity, motion):
    headers = {"Content-Type": "application/json"}
    
    data = {
        "sensors": [
            {"sensor_type": "Ultrasonic", "distance": distance},
            {"sensor_type": "DHT11", "temperature": temp, "humidity": humidity},
            {"sensor_type": "PIR", "motion": motion}
        ]
    }
    
    try:
        response = requests.post(FLASK_URL, json=data, headers=headers)
        
        if response.status_code == 201:
            print("‚úÖ Data sent to Flask successfully!")
            led.value(1)  # LED menyala saat data berhasil dikirim
        else:
            print(f"‚ö†Ô∏è Failed to send data to Flask! Response: {response.text}")
            led.value(0)  # LED mati jika gagal
        
    except Exception as e:
        print(f"‚ùå Error sending data to Flask: {e}")
        led.value(0)

# === PROGRAM UTAMA ===
connect_wifi()

while True:
    distance = get_distance()
    temp, humidity = get_dht_data()
    motion = get_motion()
    
    if distance is not None and temp is not None and humidity is not None:
        print(f"üìè Distance: {distance:.2f} cm, üå° Temp: {temp:.2f}¬∞C, üíß Humidity: {humidity:.2f}%, üö∂ Motion: {motion}")
        
        # Kirim ke Ubidots
        send_data_to_ubidots(distance, temp, humidity, motion)
        
        # Kirim ke Flask
        send_data_to_flask(distance, temp, humidity, motion)
    else:
        print("‚ö†Ô∏è Failed to read sensor data!")
        led.value(0)  # LED mati jika gagal membaca sensor

    time.sleep(5)  # Interval pembacaan 5 detik

